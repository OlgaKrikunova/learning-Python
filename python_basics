ВЫЗОВ ФУНКЦИИ
функции и методы классов вызываются круглыми скобками ()
функция(параметры функции через запятую)
Пример вызова функции: sorted(str_list, reverse=True)
Пример вызова метода класса: [].append(1)



ПРЕМЕННЫЕ (В Python динамические)
Определить переменную: имя_переменной = значение переменной
Переопределение переменной - то же самое, что определение переменной, но когда
переменная уже была определена ранее
Значение переменных содержащих НЕИЗМЕНЯЕМЫЕ типы данных не изменяются
внутри переменной.
s = "my string"
Пробуем поменять значение переменной "на месте":
s.Capitalize() => "my string"

Переопределяем переменную или определяем новую:
s = s.Capitalize() => "My string"
my_string = s.Capitalize() => "My string"



ВСТРОЕННЫЕ ФУНКЦИИ ПАЙТОН
ЭТО функции которые доступны в builtin пространстве имен - то есть везде
len
print
sorted
del (вызывается иначе: del something)
type
str
list
set
dict
int



МЕТОДЫ и АТРИБУТЫ КЛАССОВ
Методы класса это то же самое, что и функции только определенные внутри класса
Атрибуты класса, грубо говоря, это переменные определенные внутри класса
Доступ к методам и аттрибутам класса обычно определяется через .
класс.метод() или класс.атрибут
Пример вызова метода класса list: [1, 2].append(1)



ПОЛУЧЕНИЕ ЭЛЕМЕНТОВ КОЛЛЕКЦИЙ
Коллекциями называют типы данных содержащих наборы элементов (списки, словари, тюплы, сеты, строки)
Для получения элементов коллекций в пайтон часто используют [] ("магический" метод __getitem__)
В списках, тьюплах, строках [] выдает элемент по индексу:
l = [1, "a", 4]
l[1] => "a"
t = (1, "a", 4)
t[1] => "a"
s = "1a4"
s[1] => "a"

Из словаря элемент можно получить также с помощью [], но вместо индекса нужно передать ключ
d = {"a": 1, 2:"b"}
d["a"] => 1
d[2] => "b"

Также [] используется для получения срезов. Срезы являются измененной копией изначального объекта,
а не изменяют объект по-месту
l = [1, "a", 4]
l[:-1] => [1, "a"]



 ВСТРОЕННЫЕ ТИПЫ ДАННЫХ ПАЙТОН (изменяемые и неизменяемые)

 DICTIONARIES (СЛОВАРИ)
 Структура данных (ассоциативный массив, реализованный в виде хэш-тейбл) в пайтон
 которая хранит данные в виде пар ключ-значение. Ключи должны быть уникальными и не изменяемыми.
 Неупорядочена, изменяема, итерируема, поддерживает dict comprehension.

Варианты создания словаря
1) использование фигурных скобок - 1_dict = {}
1_dict = { 'word': 'a', 2: 'b'}

2) с помощью функции dict() - 1_dict = dict() - для этого можно использовать:
 - список пар (тьюплов)
num = [('a', 1), (2, 'b')]
num_paar = dict(num)
 - агрументы "ключ - значение"
 num = dict(a=1, 2=b)

 3) dict comprehension: {}, {x: x ** 2 for x in range(10)}

Добавление элементов в словарь
1) добавление нового элемента:
1_dict = { 'word': 'a', 2: 'b'} - 1_dict['c'] = 3 - новый элемент

2) метод update(),
внутри которого создаём новый словарь из элементов, которыми хотим дополнить существующий.
1_dict = { 'word': 'a', 2: 'b'} - 1_dict.update({'c': 3, 4: 'd'}) - новый элемент


Доступ к элементам по ключу
 d = dict(1="a","b"=2)
 d[1] => "a"
 d["b"] => 2
Если такого ключа нет в словаре - вызывает исключение, потому часто используют встроенные метод get
d.get("c", "hello world") => "hello world"
вторым аргументом в get выставляется значение по-умолчанию если
ключа нет в словаре (если не выставить, то вернет None)

ВСТРОЕННЫЕ МЕТОДЫ СОВАРЕЙ
dict._____() - dict.clear()
clear() - Удаляет все элементы из словаря
copy() - создает копию словаря
update() - добавляет одну или несколько пар "ключ = значение"
pop() - удаляет элемент из словаря по ключу
keys() - возвращает список ключей из словаря
values() - возвращает список значений из словаря
items() - возвращает все пары ключ=значение из словаря
popitem() - удаляет последнюю добавленную пару "ключ=значение"
get() - возвращает значение из словаря по ключу - или None, если такого ключа не существует.
setdefault() - возвращает значение указанного ключа. Если ключа не существует, создаёт его и
добавляет в словарь со значением None или тем, что вы добавите в качестве второго аргумента



СПИСКИ
Список (list) — это упорядоченный набор элементов, каждый из которых имеет свой номер,
или индекс, позволяющий быстро получить к нему доступ. Нумерация элементов в списке начинается с 0.

Чтобы создать объект list, в Python используют квадратные скобки — [].
Внутри них перечисляют элементы через запятую.


добавоение элементов
append() - добавляет элемент в конец списка - list.append(_)
insert() - добавляет элемент на опрделенную позицию в список.
Он принимает два аргумента: индекс позиции и элемент, который нужно добавить. - list.insert(1, 15)


слияние списков
 - extend() - позволяет объединить два списка, добавляя элементы второго
списка в конец первого. list1.extend(list2)
 - использование сложения списков в новый список - list_now = list_1 + list_2
 - использование умножения для повторения одного спсика - list_1 * 3
 - использование цикла for - for num in list_2:
                                  list_1.append(num)


встроенные методы списков
a.remove(x) - Удаляет в a первый элемент, значение которого равно x
a.clear() - удаляет из списка все элементы и делает список пустым.
a.index(x) - возвращает индекс элемента списка
a.pop(i) - удаляет элемент по индексу и возвращает его
a.count(x) - считает  сколько раз повторяется элемент в списке
a.sort() - сортирует список.
a.reverse() - возвращает список в обратном порядке.
a.copy() - создает поверхностную копию списка.

